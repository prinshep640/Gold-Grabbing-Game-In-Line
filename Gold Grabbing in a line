class Main
{
    // Recursive function to maximize the number of coins collected by a player,
    // assuming that the opponent also plays optimally
    public static int findMaxCoins(int[] coin, int i, int j)
    {
        // base case: one pot left, only one choice possible
        if (i == j) {
            return coin[i];
        }
 
        // if we are left with only two pots, choose one with maximum coins
        if (i + 1 == j) {
            return Integer.max(coin[i], coin[j]);
        }
 
        // if a player chooses the front pot `i`, the opponent is left to choose
        // from [i+1, j].
        // 1. If the opponent chooses front pot `i+1`, recur for [i+2, j]
        // 2. If the opponent chooses rear pot `j`, recur for [i+1, j-1]
 
        int start = coin[i] + Integer.min(findMaxCoins(coin, i + 2, j),
                                        findMaxCoins(coin, i + 1, j - 1));
 
        // if a player chooses rear pot `j`, the opponent is left to choose
        // from [i, j-1].
        // 1. If the opponent chooses front pot `i`, recur for [i+1, j-1]
        // 2. If the opponent chooses rear pot `j-1`, recur for [i, j-2]
 
        int end = coin[j] + Integer.min(findMaxCoins(coin, i + 1, j - 1),
                                        findMaxCoins(coin, i, j - 2));
 
        // return the maximum of two choices
        return Integer.max(start, end);
    }
 
    // Pots of gold game using dynamic programming
    public static void main(String[] args)
    {
        // pots of gold (even number) arranged in a line
        int[] coin = {9,6,3,5,8,2,5,4};
 
        System.out.print("The maximum coins collected by player is "
                        + findMaxCoins(coin, 0, coin.length - 1));
    }
}
